#!/bin/bash
#
# Manipulate UFW firewall rules for BitTorrent traffic


# define the target app profile
TN='transmission'

# define the target port number
TP='51413'


allowrules(){
    # ensure firewall is enabled before continuing
    ensure-enabled

    local rs=$(rule-status)

    # ensure rule is not already added before continuing
    if [[ $rs =~ ^(DENY|PARTIAL)$ ]]; then

        # remove rules beforehand if they are already partially added
        if [[ $rs = PARTIAL ]]; then
            denyrules
        fi

        # use an app profile if one exists (otherwise allow the port)
        if sudo ufw app info transmission &>/dev/null; then
            local rule="$TN"
        else
            local rule="in from any to any port $TP"
        fi

        # add rule then then reload firewall if it succeeds
        eval "sudo ufw allow $rule" && reloadufw
    else
        information "Already ALLOW"
    fi
}


denyrules(){
    # ensure firewall is enabled before continuing
    ensure-enabled

    local rs=$(rule-status)

    # ensure rule is already fully or partially added before continuing
    if [[ $rs = ALLOW ]]; then

        # check if there are port rules
        if grep -Eq "$TP (\(v6\))? +ALLOW +Anywhere( \(v6\))?" <<<"$status"; then
            if sudo ufw delete allow in from any to any port "$TP"; then
                local changes='true'
            else
                local errors='true'
            fi
        fi

        # check if there are transmission profile rules
        if grep -Eq "$TN (\(v6\))? +ALLOW +Anywhere( \(v6\))?" <<<"$status"; then
            if sudo ufw delete allow "$TN"; then
                local changes='true'
            else
                local errors='true'
            fi
        fi

    elif [[ $rs = PARTIAL ]]; then

        local port

        # create a list of matching ports (in descending order)
        # local portlist=$(sudo ufw status numbered | sed 's/^\[ \?//;s/\]//' | awk "(\$2 == \"$TP\") || (\$2 == \"$TN\") {print \$1}" | sort -nr)
        # local portlist=$(sudo ufw status numbered | awk "{ gsub(\"^\\\[ ?|\\\]\", \"\") } (\$2 == \"$TP\") || (\$2 == \"$TN\") {print \$1}" | sort -nr)
        local portlist=$(sudo ufw status numbered | grep -oP "(?<=\[)[1-9][0-9]*(?=\] ($TP|$TN) (\(v6\))?  )" | sort -nr)

        # create an array of the aforementioned ports
        # declare -al ports
        # readarray -t ports <<<"$portlist"
        local ports=( $portlist )

        # delete each port
        for port in "${ports[@]}"; do
            if [[ $port =~ ^[1-9][0-9]*$ ]] && sudo ufw delete "$port"; then
                local changes='true'
            else
                local errors='true'
            fi
        done

    else
        information "Already DENY"
        return 0
    fi

    if [[ $changes = 'true' ]]; then
        reloadufw
    fi

    if [[ $errors = 'true' ]]; then
        error "Experienced an unknown error while removing firewall rules"
        exit 1
    fi
}


# denyrules(){
#     # ensure firewall is enabled before continuing
#     ensure-enabled

#     local rs=$(rule-status)

#     # ensure rule is already fully or partially added before continuing
#     if [[ $rs = ALLOW ]]; then

#         # check if there are port rules
#         if grep -Eq '51413 (\(v6\))? +ALLOW +Anywhere( \(v6\))?' <<<"$status"; then
#             if sudo ufw delete allow in from any to any port 51413; then
#                 local changes='true'
#             else
#                 local errors='true'
#             fi
#         fi

#         # check if there are transmission profile rules
#         if grep -Eq 'transmission (\(v6\))? +ALLOW +Anywhere( \(v6\))?' <<<"$status"; then
#             if sudo ufw delete allow transmission; then
#                 local changes='true'
#             else
#                 local errors='true'
#             fi
#         fi

#     elif [[ $rs = PARTIAL ]]; then

#         declare -al ports
#         local port

#         # create a list of matching ports (in descending order)
#         # local portlist=$(sudo ufw status numbered | sed 's/^\[ \?//;s/\]//' | awk '($2 == "51413") || ($2 == "transmission") {print $1}' | sort -nr)
#         # local portlist=$(sudo ufw status numbered | awk '{ gsub("^\\[ ?|\\]", "") } ($2 == "51413") || ($2 == "transmission") {print $1}' | sort -nr)
#         local portlist=$(sudo ufw status numbered | grep -oP '(?<=\[)[1-9][0-9]*(?=\] (51413|transmission) (\(v6\))?  )' | sort -nr)

#         # create an array of the aforementioned ports
#         readarray -t ports <<<"$portlist"

#         # delete each port
#         for port in "${ports[@]}"; do
#             if [[ $port =~ ^[1-9][0-9]*$ ]] && sudo ufw delete "$port"; then
#                 local changes='true'
#             else
#                 local errors='true'
#             fi
#         done

#     else
#         information "Already DENY"
#         return 0
#     fi

#     if [[ $changes = 'true' ]]; then
#         reloadufw
#     fi

#     if [[ $errors = 'true' ]]; then
#         error "Experienced an unknown error while removing firewall rules"
#         exit 1
#     fi
# }


# denyrules(){
#     # ensure firewall is enabled before continuing
#     ensure-enabled

#     # ensure rule is already fully or partially added before continuing
#     if [[ $(rule-status) =~ ^(ALLOW|PARTIAL)$ ]]; then

#         # check if there are port rules
#         if grep -Eoq "51413 (\(v6\))?  " <<<"$status"; then
#             if sudo ufw delete allow in from any to any port 51413; then
#                 local changes='true'
#             else
#                 local errors='true'
#             fi
#         fi

#         # check if there are transmission profile rules
#         if grep -Eoq "transmission (\(v6\))?  " <<<"$status"; then
#             if sudo ufw delete allow transmission; then
#                 local changes='true'
#             else
#                 local errors='true'
#             fi
#         fi

#         [[ $changes = 'true' ]] && reloadufw

#         if [[ $errors = 'true' ]]; then
#             error "Experienced an unknown error while removing firewall rules"
#             exit 1
#         fi
#     else
#         information "Already DENY"
#     fi
# }


ensure-enabled(){
    # execute only if firewall is not enabled
    if ! firewall-state; then

        sudo ufw enable

        # exit if firewall failed to enable
        if ! firewall-state; then
            error "Unable to enable firewall"
            exit 1
        fi
    fi
}


error(){
    echo "ERROR: $@" >&2
}


firewall-state(){
    # retry up to 5 times in the event of failure
    for ((i=1; i<=5; i++)); do
        # store ufw status in global variable
        status=$(sudo ufw status 2>/dev/null)

        # local state=$(awk 'NR==1 {print $NF}' <<<"$status")
        local state=$(awk '/^Status: / {print $2}' <<<"$status")
        if [[ $state = active ]]; then
            return 0
        elif [[ $state = inactive ]]; then
            return 1
        fi

        sleep 1
    done

    error "Experienced an unknown error while checking firewall state"
    exit 1
}


information(){
    echo "INFO: $@"
}


main(){
    if (( $# == 1 )) && [[ $1 =~ ^(-h|--help|help)$ ]]; then
        echo "Usage: ${0##*/} <allow|deny|status>"
        echo
        echo "allow               create firewall rule allowing incoming connections"
        echo "deny                remove firewall rules without prompting"
        echo "state               display state of firewall"
        echo "status              display firewall rule status"
        exit 0
    fi

    # permit a other instance a chance to finish before continuing
    for ((i=1; i<=10; i++)); do
        local instances=$(pgrep -cfx 'sudo ${0##*/} (allow|deny)' 2>/dev/null)
        (( instances == 0 )) && break
        sleep 0.25
    done

    if (( $# == 1 )) && [[ $1 = allow ]]; then
        allowrules
    elif (( $# == 1 )) && [[ $1 = deny ]]; then
        denyrules
    elif (( $# == 1 )) && [[ $1 = state ]]; then
        if firewall-state; then
            echo ACTIVE
        else
            echo INACTIVE
        fi
    elif (( $# == 1 )) && [[ $1 = status ]]; then
        if firewall-state; then
            rule-status
        else
            echo INACTIVE
        fi
    else
        error "Invalid command"
        exit 1
    fi
}


reloadufw(){
    # retry reload up to 3 times in the event of failure
    for ((i=1; i<=3; i++)); do
        sudo ufw reload && break
        sleep 1
    done
}


remove(){
    if (( $# == 1 )) && [[ $1 =~ ^[1-9][0-9]*$ ]]; then
        sudo ufw delete "$1"
    elif (( $# == 2 )) && [[ $1 =~ ^[1-9][0-9]*$ ]] && [[ $2 = --force ]]; then
        sudo ufw delete "$1" <<< y
    fi
}


rule-status(){
    # count port rules
    local n=$(grep -cE "^$TP (\(v6\))?  " <<<"$status")

    # count profile rules
    local p=$(grep -cE "^$TN (\(v6\))?  " <<<"$status")

    # check whether there are strictly port or profile rules added
    if ( (( n == 2 )) && (( p == 0 )) ) \
    || ( (( n == 0 )) && (( p == 2 )) ); then
        echo ALLOW
    # check whether there are no rules added
    elif (( n == 0 )) && (( p == 0 )); then
        echo DENY
    else
        echo PARTIAL
    fi
}


# rule-status(){
#     # count port rules
#     local n=$(grep -cE "^51413 (\(v6\))?  " <<<"$status")

#     # count profile rules
#     local p=$(grep -cE "^transmission (\(v6\))?  " <<<"$status")

#     # check whether there are strictly port or profile rules added
#     if ( (( n == 2 )) && (( p == 0 )) ) \
#     || ( (( n == 0 )) && (( p == 2 )) ); then
#         echo ALLOW
#     # check whether there are no rules added
#     elif (( n == 0 )) && (( p == 0 )); then
#         echo DENY
#     else
#         echo PARTIAL
#     fi
# }


# rule-status(){
#     local i
#
#     # retry up to 3 times in the event of failure
#     for ((i=1; i<=3; i++)); do

#         # count port rules
#         local n=$(grep -cE "^51413 (\(v6\))?  " <<<"$status")

#         # count profile rules
#         local p=$(grep -cE "^transmission (\(v6\))?  " <<<"$status")

#         # check whether there are strictly port or profile rules added
#         if ( (( n == 2 )) && (( p == 0 )) ) \
#         || ( (( n == 0 )) && (( p == 2 )) ); then
#             echo ALLOW
#             return 0
#         # check whether there are no rules added
#         elif (( n == 0 )) && (( p == 0 )); then
#             echo DENY
#             return 0
#         fi

#         # update status and wait one second before retrying
#         status=$(sudo ufw status 2>/dev/null)
#         sleep 1
#     done

#     echo "PARTIAL"
# }


main "$@"
